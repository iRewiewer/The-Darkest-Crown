/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TableCheckboxesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var TableCheckboxesPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerDomEvent(document, "keyup", (evt) => {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (evt.key == "]" && view) {
        const location = view.editor.getCursor("anchor");
        const rowValue = view.editor.getLine(location.line);
        if (this.isMDCheckboxInTable(rowValue)) {
          const checkBox = this.getCheckboxLength(rowValue);
          const start = { ...location };
          start.ch -= checkBox.length;
          view.editor.setSelection(start, location);
          const checkboxId = this.generateUniqueCheckboxId(view);
          view.editor.replaceSelection(`<input type="checkbox" unchecked id="${checkboxId}">`);
        }
      }
    });
    this.registerDomEvent(document, "change", (evt) => {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (evt.target instanceof HTMLInputElement && view && evt.target.id && evt.target.hasAttribute("data-task") === false) {
        const checkbox = evt.target;
        if (checkbox.getAttribute("type") === "checkbox") {
          const page = view.getViewData();
          const id = evt.target.id;
          this.toggleCheckbox(page, view, checkbox.checked, id);
        }
      }
    });
  }
  generateUniqueCheckboxId(view) {
    let id = crypto.randomUUID().slice(-6);
    while (this.idExistsInFile(id, view)) {
      id = crypto.randomUUID();
    }
    return id;
  }
  idExistsInFile(id, view) {
    const page = view.getViewData();
    const idIndex = page.search(id);
    return idIndex !== -1;
  }
  isMDCheckboxInTable(viewData) {
    const tableRegex = /^(\s|>)*\|.*-[\s]?\[[\s]?\].*/m;
    if (viewData.match(tableRegex)) {
      return true;
    }
    return false;
  }
  getCheckboxLength(viewData) {
    const checkboxRegex = /-[\s]?\[[\s]?\]/;
    const checkboxMatch = viewData.match(checkboxRegex);
    return checkboxMatch[0];
  }
  toggleCheckbox(page, view, isChecked, checkboxId) {
    page = page.replace(new RegExp(`<input type="checkbox" (un)?checked id="${checkboxId}">`), `<input type="checkbox" ${isChecked ? "" : "un"}checked id="${checkboxId}">`);
    this.app.vault.modify(view.file, page);
  }
};
