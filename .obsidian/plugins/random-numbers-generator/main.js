/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  seedValue: Math.floor(Math.random() * 10 ** 12),
  lowRange: 1,
  highRange: 100,
  spaceAfterNumber: true
};
var addText = (editor, text) => {
  const cursor = editor.getCursor();
  editor.replaceRange(text, cursor);
  editor.setCursor(cursor.line, cursor.ch + text.length);
};
var generateNumberCallback = async (editor, settings) => {
  const seed = parseFloat(`0.${settings.seedValue.toString()}`);
  const randomNumber = Math.floor((Math.random() + seed) % 1 * settings.highRange + settings.lowRange);
  const space = settings.spaceAfterNumber ? " " : "";
  addText(editor, `${randomNumber}${space}`);
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("Loading Random Number Generator [v1.0]");
    const commands = [
      {
        id: "random-int",
        name: `Generate a random integer. Range can be modified in the plugin settings.`,
        editorCallback: (editor) => generateNumberCallback(editor, this.settings)
      },
      {
        id: "toggle-space-after-number",
        name: `Toggle the addition of a space character after generating a number.`,
        callback: () => {
          this.settings.spaceAfterNumber = this.settings.spaceAfterNumber ? false : true;
          new import_obsidian.Notice(`Space after number: ${this.settings.spaceAfterNumber ? "Enabled" : "Disabled"}`);
        }
      }
    ];
    for (const command of commands) {
      this.addCommand(command);
    }
    this.addSettingTab(new SettingsTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Seed").setDesc("Leave empty for a random one. (Default: secret)").addText((text) => text.setPlaceholder("Enter seed").setValue(this.plugin.settings.seedValue.toString()).onChange(async (value) => {
      this.plugin.settings.seedValue = parseInt(value.replace(/\D/g, (match) => match.charCodeAt(0).toString())) % 10 ** 12;
      if (isNaN(this.plugin.settings.seedValue)) {
        this.plugin.settings.seedValue = 0;
      }
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Low range value").setDesc("Set the low point of the random range. (Default: 1)").addText((text) => text.setPlaceholder("Enter number").setValue(this.plugin.settings.lowRange.toString()).onChange(async (value) => {
      this.plugin.settings.lowRange = parseInt(value.replace(/\D/g, ""));
      text.setValue(this.plugin.settings.lowRange.toString());
      if (isNaN(this.plugin.settings.seedValue)) {
        this.plugin.settings.seedValue = 1;
      }
      if (text.getValue() == "NaN") {
        text.setValue("");
      }
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("High range value").setDesc("Set the high point of the random range. (Default: 100)").addText((text) => text.setPlaceholder("Enter number").setValue(this.plugin.settings.highRange.toString()).onChange(async (value) => {
      this.plugin.settings.highRange = parseInt(value.replace(/\D/g, ""));
      text.setValue(this.plugin.settings.highRange.toString());
      if (isNaN(this.plugin.settings.seedValue)) {
        this.plugin.settings.seedValue = 100;
      }
      if (text.getValue() == "NaN") {
        text.setValue("");
      }
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Space after number").setDesc("Toggle the addition of a space character after generating a number. (Default: True)").addToggle((text) => text.setValue(this.plugin.settings.spaceAfterNumber).onChange(async (value) => {
      this.plugin.settings.spaceAfterNumber = value;
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
